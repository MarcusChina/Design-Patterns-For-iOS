一、定义：
   使用原型实例指定创建对象的种类，并且通过复制这个原型来创建新的对象
二、相关解释：
   原型模式是非常简单的一种设计模式, 在多数情况下可被理解为一种深复制的行为。在Objective-C中使用原型模式, 首先要遵循NSCoping协议(OC中一些内置类遵循该协议, 例如NSArray, NSMutableArray等)
   此模式的最低限度是生成对象的真是副本，以用作同一环境下其他相关事物的基础（原型）。
三、使用场景：
   1、需要创建的对象应独立于其类型与创建方式。也就是说我们想要的对象并不能够直接通过初始化函数来创建出来，其创建过程不具有普遍性且复杂。
   2、要实例化类是在运行时决定的。在编写代码的时候并不知道哪种对象会被创建出来，其内部的结构如何复杂(例如：复杂程度取决于用户的操作)。
   3、不想要与产品层次相对应的工厂层次。不通过工厂方法或者抽象工厂来控制产品的创建过程，想要直接复制对象
   4、不同类的实例间的差异仅是状态的若干组合。因此复制相应数量的原型比手工实例化更加方便。
   5、类不容易创建，比如每个组件可把其他组件作为子节点的组合对象。复制已有的组合对象并对副本进行修改会更加容易。如果内部结构复杂，不容易重现。

四、延伸知识点：
   1、fundation框架中 对象的copy不可变，mutable copy是可变的。

   2、不可变对象的copy是浅拷贝，mutable copy是深拷贝，可变对象的copy和mutable copy是深拷贝。
