一、定义：
   运用共享技术有效地支持大量细粒度的对象；

二、相关说明：
   享元模式（英语：Flyweight Pattern）可以避免大量非常相似类的开销，在程序设计中，有时需要生成大量细粒度的类实例来表示数据（上面的相同key值的网
   页），如果能发现这些实例除了几个参数外（上面的User）基本上都是相同的，有时就能够受大幅度的减少需要实例化的类的数量。如果能把那些参数移到类实例的外
   面（用User类来封装数据结构），在方法调用时将它们传递进来，就可以通过共享大幅度的减少单个实例的数目。

三、适用场景：
   1、应用程序使用很多对象。
   2、在内存中保存对象会影响内存性能。
   3、对象的多数特有状态可以放到外部而轻量化。
   4、移除了外在状态后，可以用较少的共享对象替代原来的那组对象。
   5、应用程序不依赖于对象标识，因为共享对象不能提供唯一的标识。

四、Demo说明：
   http://www.mamicode.com/info-detail-1037340.html
